#!/usr/bin/env ruby

require 'optparse'

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} (add|remove) domain [options]"

  options[:verbose] = false
  opts.on( '-v', '--verbose', "Show me what you're doing" ) do
    options[:verbose] = true
  end

  options[:branch] = 'master'
  opts.on( '-b', '--branch', "Deploy from branch BRANCH" ) do |branch|
    options[:branch] = branch
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

action = ARGV[0]
domain = ARGV[1]
branch = ARGV[2] || 'master'
site_dir = Dir.pwd

def with_gitosis_config
  previous_dir = Dir.pwd
  Dir.chdir("#{ENV['HOME']}/.gitosis-admin")
  conf = File.read("gitosis.conf")
  sections = []
  sites = {}
  conf.each_line do |line|
    line.chomp!
    if line =~ /\[(.*)\]/
      words = $1.split(/\s+/)
      if words[0] == 'group'
        sections << {:section => words, :group => words[1]}
        if sections.last[:group] =~ /\....?/
          sites[sections.last[:group]] = sections.last
        end
      else
        sections << {:section => words}
      end
    elsif line =~ /.+\=.+/
      key, value = line.split(/\s*\=\s*/)
      sections.last[key] = value
    end
  end
  sections.reject! {|sec| sec.has_key?(:group) && sites.has_key?(sec[:group])}
  Dir.chdir(previous_dir)

  yield(sites)
  return sections, sites
end

def modify_gitosis_config(msg)
  previous_dir = Dir.pwd
  Dir.chdir("#{ENV['HOME']}/.gitosis-admin")
  sections, sites = with_gitosis_config do |s|
    yield(s)
  end

  new_conf = ''
  sections.each do |sec|
    new_conf << "[#{sec[:section].join(' ')}]\n"
    sec.each_key {|k| new_conf << "#{k} = #{sec[k]}\n" if k.is_a?(String)}
    new_conf << "\n"
  end
  sites.each do |dom,sec|
    new_conf << "[group #{dom}]\n"
    sec.each_key {|k| new_conf << "#{k} = #{sec[k]}\n" if k.is_a?(String)}
    new_conf << "\n"
  end
  File.open("gitosis.conf", 'w') { |file| file << new_conf }
  # git commit
    system("git commit -am \"#{msg}\"")
  # git push
    system("git push")
  Dir.chdir(previous_dir)
end

case action
when 'add'
  # Add to the gitosis-admin config
    puts "Adding #{domain} to the server site list..."
    # check it out into ~/.gitosis-admin if not there already
      system "git clone git@linode:gitosis-admin.git #{ENV['HOME']}/.gitosis-admin" unless File.directory?("#{ENV['HOME']}/.gitosis-admin")
      Dir.chdir("#{ENV['HOME']}/.gitosis-admin")
    # modify the config
      modify_gitosis_config("Added site #{domain}.") do |sites|
        # add the entry
        sites[domain] = {:section => ['group', domain], 'writable' => domain, 'members' => "#{ENV['USER']}"}
      end
  # Git push this repository to the new domain name git repo
    puts "Pushing site from #{site_dir}, branch #{options[:branch]} to linode..."
    Dir.chdir(site_dir)
    system("git remote add linode git@linode:#{domain}.git")
    system("git push linode #{options[:branch]}")
  # Ping linode administration app to insert the post-receive hook and run it as @git.
    puts "Initializing git hooks and starting site for the first time..."
    # puts `curl -s -d "domain=#{domain}" http://linode_admin:linode_me_nidole@linode:8999/init_git_hooks_please`
    system("ssh dcparker@linode \"sudo bash -c \\\"echo \\\\\". /home/git/defaults/post-receive\\\\\" > /home/git/repositories/#{domain}.git/hooks/post-receive; chown git:git /home/git/repositories/#{domain}.git/hooks/post-receive; chmod 755 /home/git/repositories/#{domain}.git/hooks/post-receive; cd /home/git/repositories/#{domain}.git/hooks; sudo -H -u git ./post-receive\\\"\"")
    # system("cp public/post-receive /home/git/repositories/#{@domain}.git/hooks/post-receive")
    # system("chown git:git /home/git/repositories/#{@domain}.git/hooks/post-receive")
    # system("chmod 755 /home/git/repositories/#{@domain}.git/hooks/post-receive")
    # puts "Starting site for the first time..."
    # puts `curl -s -d "domain=#{domain}" http://linode_admin:linode_me_nidole@linode:8999/run_post_receive_hook`
    # system("ssh dcparker@linode \"sudo bash -c \\\"cd /home/git/repositories/#{domain}.git/hooks; sudo -H -u git ./post-receive\\\"\"")
when 'remove'
  # Remove from the gitosis-admin config
    puts "Removing #{domain} from the server site list..."
    modify_gitosis_config("Removed site #{domain}.") do |sites|
      # remove the entry
      sites.delete(domain)
    end
  # Deactivate and remove the site from the server (repo, configs, app)
    puts "Removing the repository from the server..."
    # puts `curl -s -d "domain=#{domain}" http://linode_admin:linode_me_nidole@linode:8999/remove_site`
    system("ssh dcparker@linode \"sudo bash -c \\\"sudo -H -u git sudo site deactivate #{domain}; sudo -H -u git sudo site remove #{domain}; rm -rf /home/git/repositories/#{domain}.git; rm -rf /home/git/apps/#{domain}\\\"\"")
    # ret = `sudo -H -u git sudo site deactivate #{@domain}`
    # ret << `sudo -H -u git sudo site remove #{@domain}`
    # ret << `rm -rf /home/git/repositories/#{@domain}.git`
    # ret << `rm -rf /home/git/apps/#{@domain}`

  # Remove linode from the list of remotes in this repo?
    conf = File.read(".git/config")
    new_config = ''
    keep = true
    conf.each_line do |line|
      if line =~ /^\[(.+)\]/
        if $1 == 'remote "linode"'
          keep = false
        else
          keep = true
          new_config << line
        end
      elsif keep
        new_config << line
      end
    end
    File.open(".git/config", 'w') { |file| file << new_config }
when 'restart'
  puts "Restarting #{domain}..."
  system("ssh dcparker@linode \"sudo bash -c \\\"cd /home/git/repositories/#{domain}.git/hooks; sudo -H -u git ./post-receive\\\"\"")
when 'list'
  # Simply list the active website repositories
  with_gitosis_config do |sites|
    # add the entry
    puts "Sites:\n\t" + sites.keys.join("\n\t")
  end
when 'migrate'
  system("ssh dcparker@linode \"sudo bash -c \\\"cd /home/git/apps/#{domain}; sudo -H -u git rake db:migrate\\\"\"")
else
  puts optparse
end
