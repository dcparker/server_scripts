#!/usr/bin/env ruby

# One idea:
# Use pre-receive. Exit with a non-zero status to abort and not allow data to be committed.
# The git repo is not where the app is. So, what we want to do is check out the app to some sandbox location and try to run it on a sandboxed port.
# If this succeeds, allow the commit. If not, disallow the commit and abort the push. In the meantime, we can also print some nice status lines.

# Simple method:
# Use post-receive. Check out the repo into an executable location (/home/dcparker/apps), create configs if necessary and activate it.

domain = Dir.pwd.match(/\/([^\/]+)\.git/)[1]
app_dir = "/home/git/apps/#{domain}"

# if app is not there, create it; otherwise update it
if File.exists?(app_dir)
  Dir.chdir(app_dir)
  system("git pull --rebase")
else
  system("git clone /home/git/repositories/#{domain}.git #{app_dir}")
  Dir.chdir(app_dir)
  system("mkdir log")
  system("cp /home/git/defaults/cilantro.yml config/cilantro.yml")
end

# if site configs don't exist, create them; otherwise just restart the app
if `sudo site list` =~ /#{domain}/
  # Update and restart the app
  system("sudo site restart #{domain}")
else
  # Create and activate the app if it doesn't exist
  system("sudo site new #{domain}")
  system("sudo site activate #{domain}")
end
