#!/usr/bin/env ruby

def interpolate(fulltext, replace={})
  replace.each do |key,value|
    fulltext.gsub!(/\[#{key.to_s}\]/, value.to_s)
  end
  fulltext
end

require 'optparse'
options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: site (new|activate|deactivate) domain.com"

  # options[:verbose] = false
  # opts.on( '-v', '--verbose', "Show me what you're doing" ) do
  #   options[:verbose] = true
  # end

end

fail "Usage: site (new|activate|deactivate) domain.com" if ARGV.length < 2
action = ARGV[0]
domain = ARGV[1]
user   = ENV['USER']

matches = Dir.glob("*-#{domain}")
file_domain = matches[0] if matches.length > 0

case ARGV[0]
when 'new'
  # 1) Gather some data
  iterator = if File.exists?('.site_iterator')
    File.read('.site_iterator').gsub(/\D/,'').to_i
  else
    0
  end + 1
  File.open('.site_iterator', 'w') do |file|
    file << iterator
  end
  ports = [6000 + iterator*10]
  ports[1] = ports[0]+1
  ports[2] = ports[1]+1
  ports[3] = ports[2]+1
  ports[4] = ports[3]+1

  # 2) Copy the samples
  File.open("#{iterator}-#{domain}", 'w') do |file|
    file << interpolate(File.read('sample-site.com'), {
      :SITE => domain,
      :PORT => ports[0],
      :USER => user
    })
  end
  File.open("#{iterator}-#{domain}-thin.yml", 'w') do |file|
    file << interpolate(File.read('sample-site.com-thin.yml'), {
      :SITE => domain,
      :PORT1 => ports[1],
      :USER => user
    })
  end
  File.open("#{iterator}-#{domain}.cfg", 'w') do |file|
    file << interpolate(File.read('sample-site.com.cfg'), {
      :SITE_NAME => domain.gsub(/[\.]/,'_'),
      :PORT => ports[0],
      :PORT1 => ports[1],
      :PORT2 => ports[2],
      :PORT3 => ports[3],
      :PORT4 => ports[4]
    })
  end
when 'activate'
  # 1) hardlink it into /etc/nginx/sites-available
  system("sudo ln /home/#{user}/SiteConfigs/#{file_domain} /etc/nginx/sites-available/#{domain}")
  # 2) symlink it into /etc/nginx/sites-enabled
  system("sudo ln -s /etc/nginx/sites-available/#{domain} /etc/nginx/sites-enabled/#{domain}")
  # 3) hardlink thin config into /etc/thin
  system("sudo ln /home/#{user}/SiteConfigs/#{file_domain}-thin.yml /etc/thin/#{domain}-thin.yml")
  # 4) hardlink it into /etc/haproxy/sites
  system("sudo ln /home/#{user}/SiteConfigs/#{file_domain}.cfg /etc/haproxy/sites/#{domain}.cfg")
  if File.exists?("/home/#{user}/apps/#{domain}/config/cilantro.run")
    iterator = file_domain.match(/^(\d+)/)[1].to_i
    ports = []
    ports[0] = 6001 + iterator*10
    ports[1] = ports[0]+1
    ports[2] = ports[1]+1
    ports[3] = ports[2]+1
    File.open("/home/#{user}/apps/#{domain}/config/cilantro.run", 'w') do |cilantro|
      cilantro << ports.join("\n")
    end
  end

  # 5) Reload haproxy
  system("sudo /etc/init.d/haproxy reload")
  # 6) Reload nginx
  system("sudo /etc/init.d/nginx reload")
  # 7) Start any cilantro services for this app
  system("sudo cilantro start /home/#{user}/apps/#{domain}")
when 'deactivate'
  # 1) remove all of the configs from the active system
  system("sudo rm /etc/nginx/sites-enabled/#{domain}")
  system("sudo rm /etc/nginx/sites-available/#{domain}")
  system("sudo rm /etc/thin/#{domain}-thin.yml")
  system("sudo rm /etc/haproxy/sites/#{domain}.cfg")

  # 2) Reload nginx
  system("sudo /etc/init.d/nginx reload")
  # 3) Reload haproxy
  system("sudo /etc/init.d/haproxy reload")
  # 4) Stop any cilantro services for this app
  system("sudo cilantro stop /home/#{user}/apps/#{domain}")
end
