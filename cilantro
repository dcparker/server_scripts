#!/usr/bin/env ruby

# File: bin/cilantro
# Cilantro is a simple app structure for use with Sinatra, and this is the
# start/stop/restart script. All it does is step into the given directory,
# and require sinatra and then config/init.rb. It'll record its pid to a
# file and run Sinatra on the port you specify -- allowing you to stop and
# restart that same program as you wish. All you have to give it a
# directory to run it from, but you'll probably want to give it a port too.

Kernel.trap('INT') {
  puts "Exiting..."
  exit
}

require 'optparse'

def safefork
  tryagain = true

  while tryagain
    tryagain = false
    begin
      if pid = fork
        return pid
      end
    rescue Errno::EWOULDBLOCK
      sleep 5
      tryagain = true
    end
  end
end

def redirect_io(logfile_name)
  begin; STDIN.reopen "/dev/null"; rescue ::Exception; end

  if logfile_name
    begin
      STDOUT.reopen logfile_name, "a"
      STDOUT.sync = true
    rescue ::Exception
      begin; STDOUT.reopen "/dev/null"; rescue ::Exception; end
    end
  else
    begin; STDOUT.reopen "/dev/null"; rescue ::Exception; end
  end

  begin; STDERR.reopen STDOUT; rescue ::Exception; end
  STDERR.sync = true
end

def report_error(e)
  # Make the magic happen!
  # (jabber me when there's an error loading an app)
  if File.exists?("config/#{ENV['RACK_ENV']}.yml")
    jabber = YAML.load_file("config/#{ENV['RACK_ENV']}.yml") || {}
    if jabber[:notify]
      begin
        require 'rubygems'
        require 'xmpp4r'
        client = Jabber::Client.new(Jabber::JID.new("#{jabber[:username]}/cilantro"))
        client.connect('talk.google.com', '5222')
        client.auth(jabber[:password])
        client.send(Jabber::Presence.new.set_type(:available))
        msg = Jabber::Message.new(jabber[:notify], "#{e.inspect}\n#{e.backtrace.join("\n")}")
        msg.type = :chat
        client.send(msg)
        client.close
      rescue => f
        raise f
      end
    else
      raise e
    end
  else
    raise e
  end
end

$options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [action=start|stop|status|restart|new|update|push|git] [directory=.] [options]"

  $options[:verbose] = false
  opts.on( '-v', '--verbose', "Show me what you're doing" ) do
    $options[:verbose] = true
  end

  $options[:host] = '0.0.0.0'
  opts.on('--host HOST', "Listen on host HOST (default ALL:0.0.0.0)") do |host|
    $options[:host] = host
    $options[:specified_host] = true
  end

  $options[:port] = 5000
  opts.on( '-p', '--port PORT', "Listen on port PORT (default 5000)" ) do |port|
    $options[:port] = port
    $options[:specified_port] = true
  end

  ENV['RACK_ENV'] = 'development'
  opts.on( '-e', '--environment ENV', "Set the environment manually (defaults to RACK_ENV or development)") do |env|
    $options[:manual_environment] = ENV['RACK_ENV'] = env
  end

  $options[:config] = nil
  opts.on( '-c', '--config CONFIG', "Use config file CONFIG" ) do |conf|
    raise if !File.exists?(conf)
    $options[:config] = conf
  end

  $options[:database_config] = nil
  opts.on( '--database_config CONFIG', "Use database config file CONFIG") do |conf|
    $options[:database_config] = conf
  end

  $options[:message] = ''
  opts.on( '-m MESSAGE', "Commit message for cilantro updates." ) do |m|
    $options[:message] = m
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

# FIRST default setting, if there is a file named RACK_ENV, read it. Or assume development until told otherwise.
ENV['RACK_ENV'] = File.exists?('RACK_ENV') ? File.read('RACK_ENV').chomp : 'development'
optparse.parse! unless ARGV[0] == 'git'

$action = ARGV[0]
directory = ARGV[1]
if directory.nil?
  if $action =~ /^(run|start|stop|status|restart|new|update|push|git)$/
    directory = Dir.pwd
  elsif $action.nil?
    directory = Dir.pwd
    $action = 'run'
  else
    directory = $action
    $action = 'run'
  end
end
if directory == '.'
  directory = Dir.pwd
end

puts "Using database config #{$options[:database_config]}" if $options[:database_config]
$options[:database_config] = nil if $options[:database_config] && !File.exists?($options[:database_config]) && !File.exists?(directory + '/' + $options[:database_config])

ports = []
require 'yaml'
$config = case
when $options[:config]
  YAML.load_file($options[:config])
when File.exists?("#{directory}/config/#{ENV['RACK_ENV']}.yml")
  YAML.load_file("#{directory}/config/#{ENV['RACK_ENV']}.yml")
else
  {}
end || {}
ENV['RACK_ENV'] = $config[:environment].to_s if $config[:environment] && !$options[:manual_environment]

if ($options[:config] || (!$options[:specified_port] && File.exists?("#{directory}/config/#{ENV['RACK_ENV']}.yml"))) && $action =~ /start/
  if $config.is_a?(Hash)
    $options[:host] = $config[:host] if $config.has_key?(:host) && !$options[:specified_host]
    ports = $config[:ports] || []
    $options[:port] = ports.pop unless ports.empty? # if no ports specified, we'll continue with the default port 5000
    # Then we need to start a few more starter processes if there are more ports to run on
    ports.each do |port|
      system "#{$0} #{$action} \"#{directory}\" --host #{$options[:host]} --port #{port}#{' --database_config '+$options[:database_config] if $options[:database_config]}#{' --verbose' if $options[:verbose]}"
      sleep 1 # give each one a little time to start up
    end
  end
end

# Start our stuff
Dir.chdir(directory) if File.directory?(directory)
write_dir = File.directory?('log') ? 'log' : 'config'

RACK_ENV = ENV['RACK_ENV'].to_sym

def run_app!
  require 'lib/cilantro'
  Cilantro.database_config $options[:database_config]
  Cilantro.load_environment
  Cilantro.set_options(
    :run => Proc.new { false },
    :host => $options[:host],
    :port => $options[:port]
  )

  # Need to add an EM.watch_dir method, to notice files added, modified, or deleted.
  #   EM.watch_file("/tmp/foo", Handler)
  # where Handler is a class that on method_missing simply reloads the app. :)
  # Do need to think about what to do when reloading the app fails due to error.
  # Also could implement the EM way to finish outstanding requests before quitting.

  begin
    server = Rack::Handler.get('thin')
    server.run Cilantro.app, :Host => $options[:host], :Port => $options[:port]
  rescue RuntimeError => e
    if e.to_s == 'no acceptor'
      warn "\n\t*** Can't use port #{$options[:port]}, someone's already there! ***\n"
      exit!
    else
      warn "\n\tFatal error: #{e.inspect}\n\t#{e.backtrace.join("\n\t")}\n"
    end
  end
end

begin
  case $action
  when 'run'
    if File.exists?('config/init.rb')
      run_app!
    else
      puts "ERROR: #{directory} doesn't seem to be a Cilantro directory (missing config/init.rb)"
      exit
    end
  when 'start'
    Dir.glob("#{write_dir}/cilantro.*.pid").each do |pidfile|
      pid = pidfile.match(/(\d+)/)[0]
      port = File.read(pidfile).chomp
      if $options[:port].to_s == port.to_s
        # Check to see if it's actually running:
        if `which pidof` == '' || pid == `pidof "cilantro [#{port.to_s}]"`.chomp
          puts "[WARN] Cilantro app already running on #{port}! Trying again in 1 seconds..."
          sleep 1
          exit if pid == `pidof "cilantro [#{port.to_s}]"`.chomp
        end
        if File.exists?(pidfile)
          File.delete(pidfile)
          puts "[WARN] Cilantro app must have ended prematurely: stale pid file detected and removed."
        end
      end
    end

    # Check whether environment is sane...
    #   - config/init
    if File.exists?('config/init.rb')
      puts "[START] Cilantro app in #{ENV['RACK_ENV']} in #{directory} on port #{$options[:host]}:#{$options[:port]}..."
      puts "Started #{ports.length+1} Cilantro services." unless ports.empty?

      # Fork to a daemon now...
      srand # Split rand streams between spawning and daemonized process
      safefork and exit # Fork and exit from the parent
      # Detach from the controlling terminal
      unless sess_id = Process.setsid
        raise Daemons.RuntimeException.new('cannot detach from controlling terminal')
      end
      # Prevent the possibility of acquiring a controlling terminal
      #if oldmode.zero?
        trap 'SIGHUP', 'IGNORE'
        safefork and exit
      #end
      $0 = "cilantro [#{$options[:port]}]"
      File.umask 0000 # Insure sensible umask
      # Make sure all file descriptors are closed
      ObjectSpace.each_object(IO) do |io|
        unless [STDIN, STDOUT, STDERR].include?(io)
          begin
            unless io.closed?
              io.close
            end
          rescue ::Exception
          end
        end
      end
      $process_id = Process.pid

      redirect_io("#{write_dir}/cilantro.#{$options[:port]}.log")

      File.open("#{write_dir}/cilantro.#{$process_id}.pid", 'w') do |pidfile|
        pidfile << $options[:port]
      end

      at_exit {
        File.delete("#{write_dir}/cilantro.#{$process_id}.pid")
      }

      run_app!
    else
      puts "ERROR: #{directory} doesn't seem to be a Cilantro directory (missing config/init.rb)"
      exit
    end
  when 'status'
    count = 0
    pidfiles = Dir.glob("#{write_dir}/cilantro.*.pid")
    pidfiles.each do |pidfile|
      pid = pidfile.match(/(\d+)/)[0]
      port = File.read(pidfile).chomp
      if $options[:port] == port || !$options[:specified_port]
        puts "[STATUS] Cilantro app running on port #{port}..."
        count += 1
      end
    end
    puts "#{count} Cilantro running for #{directory}."
  when 'stop'
    count = 0
    pidfiles = Dir.glob("#{write_dir}/cilantro.*.pid")
    pidfiles.each do |pidfile|
      pid = pidfile.match(/(\d+)/)[0]
      port = File.read(pidfile).chomp
      if $options[:port] == port || !$options[:specified_port]
        # Check to see if it's actually running:
        if `which pidof` == '' || pid == `pidof "cilantro [#{port.to_s}]"`.chomp
          puts "[STOP] Cilantro app in #{directory} on port #{port}..."
          Process.kill("INT", pid.to_i)
          count += 1
        end
        sleep 0.5
        if File.exists?(pidfile)
          if `which pidof` == '' || pid == `pidof "cilantro [#{port.to_s}]"`.chomp
            Process.kill("TERM", pid.to_i) rescue nil
            sleep 0.3
            Process.kill("KILL", pid.to_i) rescue nil
          end
          if File.exists?(pidfile)
            File.delete(pidfile) rescue nil
            puts "[WARN] Cilantro app must have ended prematurely: stale pid file detected and removed."
          end
        end
      end
    end
    puts "Stopped #{count} Cilantro services."
  when 'restart'
    puts "sorry, not yet implemented...\n\nWhat I want here is to restart all cilantro services that match the commandline specifications, but each with the full options they started with."
  when 'new'
    ENV['GIT_DIR'] = "#{ENV['HOME']}/.cilantro.git"
    system "mkdir \"#{directory}\""
    Dir.chdir(directory)
    if File.directory?(ENV['GIT_DIR'])
      system "git reset --hard HEAD"
    else
      system "git clone git://github.com/dcparker/cilantro.git \"#{directory}\""
    end
    puts "Run 'git remote add origin ...' to add an origin for your project. Or if running on linode, simply run 'linode add domain.com'"
    puts "Whenever the cilantro project is updated, you can keep up to date by running 'cilantro update'"
    exec "mate ." if `which mate`
  when 'update-shared'
    # Maybe ... to update the shared repo without checking it out.
  when 'update'
    last_commit = `git config cilantro.version`.chomp
    ENV['GIT_DIR'] = "#{ENV['HOME']}/.cilantro.git"
    unless File.directory?("#{ENV['HOME']}/.cilantro.git")
      system "git clone git://github.com/dcparker/cilantro.git .cgit.foobar"
      system "rm -rf .cgit.foobar"
    end
    last_commit ||= `git log -n1`.split(/\n/)[0].split(/\s/)[1]
    deliberate_diff = `git diff #{last_commit} -p`
    `git reset --hard #{last_commit}`
    `git pull origin cilantro`
    `git reset --hard cilantro`
      # Save the latest cilantro version that we're working from here.
      last_commit = `git log -n1`.split(/\n/)[0].split(/\s/)[1]
      ENV['GIT_DIR'] = ".git"
      `git config cilantro.version #{last_commit}`
    if deliberate_diff.empty? # This really will only happen on an unaltered cilantro repo.
      puts "No changes to reapply."
    else
      puts "Reapplying app diff..."
      IO.popen("patch -u --force --no-backup-if-mismatch -p1", 'w') {|p|
        p.puts deliberate_diff
      }
    end
    puts "Updated to #{last_commit}."
  when 'push'
    # git checkout -- .
    # rm bin/cilantro.rej lib/cilantro/templater/bootstrap.rb.rej lib/cilantro/templater/markdown.rb.rej lib/cilantro/templater/plain.rb.rej lib/cilantro/templater.rb.rej lib/cilantro/templater/erb.rb.rej lib/cilantro/templater/haml.rb.rej
    # This is to update the Cilantro repo from a separate app. It ASSUMES YOU HAVE ACCESS to do so, and that the shared cilantro repo is already up to date.
    # 1. record a diff since the last commit in the project repo
    if $options[:message].empty?
      puts "-m MESSAGE is NECESSARY when running cilantro-push!"
      exit
    end

    puts "Recording state..."
    cilantro_new_diff = `git diff --cached -p`
    last_project_commit = `git log -n1`.split(/\n/)[0].split(/\s/)[1]

    # 2. record changes since last cilantro update
    last_cilantro_commit = `git config cilantro.version`.chomp
    ENV['GIT_DIR'] = "#{ENV['HOME']}/.cilantro.git"
    if last_cilantro_commit != `git log -n1`.split(/\n/)[0].split(/\s/)[1]
      puts "Cilantro is not up to date in this project! Try stashing the changes and saving them later, or save a patch file and reapply it after updating Cilantro in this project."
      exit
    end
    # Take off all of the cilantro changes, to record the project changes since last cilantro update.
    IO.popen("patch -u -R --force --no-backup-if-mismatch -p1", 'w') {|p|
      p.puts cilantro_new_diff
    }
    project_diff = `git diff #{last_cilantro_commit} -p`

    # 3. reset to vanilla cilantro, apply the new cilantro code, then commit and push the changes
    `git reset --hard #{last_cilantro_commit}`
    puts "Applying changes to Cilantro..."
    IO.popen("patch -u --force --no-backup-if-mismatch -p1", 'w') {|p|
      p.puts cilantro_new_diff
    }
    # Make a list of all the files added/modified:
    add_mod = cilantro_new_diff.scan(/^\+\+\+ b\/(.*)$/).flatten
    `git add \"#{add_mod.join('" "')}\"` unless add_mod.empty?
    # And a list of all the files that were deleted:
    deleted = cilantro_new_diff.scan(/^\-\-\- a\/(.*)$/).flatten - add_mod
    `git rm \"#{deleted.join('" "')}\"` unless deleted.empty?
    `git commit -m \"#{$options[:message]}\"`
    `git push`

    # 4. restore the app to its original position and commit the cilantro update
    puts "Restoring app..."
    last_cilantro_commit = `git log -n1`.split(/\n/)[0].split(/\s/)[1]
    ENV['GIT_DIR'] = ".git"
    # Re-apply the project differences
    IO.popen("patch --force --no-backup-if-mismatch -p1", 'w') {|p|
      p.puts project_diff
    }
    `git commit -m \"#{$options[:message]}\"`

    # 5. set git config cilantro.version to the new version
    `git config cilantro.version #{last_cilantro_commit}`
    puts "Updated Cilantro: \"#{$options[:message]}\""
  when 'git'
    unless ENV['GIT_DIR'] == "#{ENV['HOME']}/.cilantro.git"
      ENV['GIT_DIR'] = "#{ENV['HOME']}/.cilantro.git"
      puts "Now using #{ENV['HOME']}/.cilantro.git. Type exit to return"
      exec "bash --login"
    end
  end
rescue SyntaxError, LoadError => e
  puts "Error: #{e}\n#{e.backtrace.join("\n")}"
  report_error(e)
rescue => e
  puts "Error: #{e}\n#{e.backtrace.join("\n")}"
  report_error(e)
end
